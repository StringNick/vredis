module proto

import time
import strconv

pub fn scan(b []u8, mut v Arg) ? {
	match v {
		string {
			v = b.str()
			return
		}
		[]u8 {
			v = b
			return
		}
		int {
			v = strconv.atoi(b.str())?
			return
		}
		i8 {
			n := strconv.parse_int(b.str(), 10, 8)?
			v = i8(n)
			return
		}
		i16 {
			n := strconv.parse_int(b.str(), 10, 16)?
			v = i16(n)
			return
		}
		i64 {
			n := strconv.parse_int(b.str(), 10, 64)?
			v = i64(n)
			return
		}
		u8 {
			n := strconv.parse_uint(b.str(), 10, 8)?
			v = u8(n)
			return
		}
		u16 {
			n := strconv.parse_uint(b.str(), 10, 16)?
			v = u16(n)
			return
		}
		u64 {
			n := strconv.parse_uint(b.str(), 10, 64)?
			v = u64(n)
			return
		}
		f32 {
			n := strconv.atof64(b.str())?
			v = f32(n)
			return
		}
		f64 {
			n := strconv.atof64(b.str())?
			v = n
			return
		}
		bool {
			v = b.len == 1 && b[0] == `1`
			return
		}
		time.Time {
			t := time.parse_rfc3339(b.str())?
			v = t
		}
		time.Duration {
			n := strconv.parse_int(b.str(), 10, 64)?
			v = time.Duration(n)
			return
		}
		// TODO: net.Ip, binary_marshaller
	}

	return error('redis: can\'t unmarshal $v (consider implementing BinaryUnmarshaler)')
}

pub fn scan_slice(data []string, mut slice []mut Arg) ? {
	for i, s in data {
		scan(s.bytes(), mut slice[i])?
	}
}